scopeName: 'source.jq'
name: 'jq'
fileTypes: [
  'jq'
]
patterns: [
  {
    include: '#comment'
  }
  {
    include: '#array'
  }
  {
    include: '#object'
  }
  {
    include: '#function'
  }
  {
    include: '#string'
  }
  {
    include: '#field'
  }
  {
    include: '#variable'
  }
  {
    include: '#format'
  }
  {
    include: '#constant'
  }
  {
    include: '#keyword'
  }
  {
    include: '#filter'
  }
  {
    include: '#number'
  }
  {
    include: '#operator'
  }
  {
    include: '#punctuation'
  }
]
repository:
  comment:
    begin: '#'
    end: '$'
    name: 'comment.line.number-sign.jq'
  constant:
    match: '(?<!\\.)\\b(true|false|null)(?!\\s*:)\\b'
    name: 'constant.language.jq'
  field:
    match: '\\.[a-zA-Z_]\\w*'
    name: 'entity.other.attribute-name.jq'
  filter:
    match: '([a-zA-Z_]\\w*::)*[a-zA-Z_]\\w*'
    name: 'support.function.jq'
  format:
    match: '@\\w+'
    name: 'constant.other.symbol.jq'
  function:
    begin: '(?<!\\.)\\bdef(?!\\s*:)\\b'
    beginCaptures:
      0:
        name: 'storage.type.function.jq'
    end: '([a-zA-Z_]\\w*::)*[a-zA-Z_]\\w*'
    endCaptures:
      0:
        name: 'entity.name.function.jq'
    name: 'meta.function.jq'
    patterns: [
      {
        include: '#comment'
      }
      {
        match: '\\S+'
        name: 'invalid.illegal.identifier.jq'
      }
    ]
  keyword:
    name: 'keyword.control.jq'
    match: """(?x)
      (?<!\\.) \\b
      ( and
      | as
      | break
      | catch
      | elif
      | else
      | empty
      | end
      | foreach
      | if
      | import
      | include
      | label
      | module
      | or
      | reduce
      | then
      | try
      ) (?!\\s*:) \\b
    """
  number:
    match: '([0-9.]{2,}|[0-9]+)([eE][+-]?[0-9]+)?'
    name: 'constant.numeric.jq'
  array:
    begin: '\\['
    beginCaptures: 0: name: 'punctuation.definition.bracket.square.begin.jq'
    endCaptures:   0: name: 'punctuation.definition.bracket.square.end.jq'
    end: '\\]'
    name: 'meta.array.jq'
    patterns: [
      {
        include: '#comment'
      }
      {
        include: '#string'
      }
      {
        begin: '\\('
        beginCaptures: 0: name: 'punctuation.definition.bracket.round.begin.jq'
        endCaptures:   0: name: 'punctuation.definition.bracket.round.end.jq'
        end: '\\)'
        patterns: [
          {
            include: '#self_in_round_brackets'
          }
        ]
      }
      {
        include: '$self'
      }
      {
        match: ','
        name: 'punctuation.separator.jq'
      }
      {
        match: '\\S+'
        name: 'invalid.illegal.identifier.jq'
      }
    ]
  object:
    begin: '{'
    beginCaptures: 0: name: 'punctuation.definition.bracket.curly.begin.jq'
    endCaptures:   0: name: 'punctuation.definition.bracket.curly.end.jq'
    end: '}'
    name: 'meta.object.jq'
    patterns: [
      {
        include: '#comment'
      }
      {
        include: '#string'
      }
      {
        include: '#variable'
      }
      {
        match: '([a-zA-Z_]\\w*::)*[a-zA-Z_]\\w*'
        name: 'entity.other.attribute-name.id.jq'
      }
      {
        begin: '\\('
        beginCaptures: 0: name: 'punctuation.definition.bracket.round.begin.jq'
        endCaptures:   0: name: 'punctuation.definition.bracket.round.end.jq'
        end: '\\)'
        patterns: [
          {
            include: '#self_in_round_brackets'
          }
        ]
      }
      {
        begin: ':'
        beginCaptures: 0: name: 'punctuation.separator.begin.jq'
        endCaptures:   0: name: 'punctuation.separator.end.jq'
        end: ',|(?=})'
        patterns: [
          include: '$self'
        ]
      }
      {
        match: ','
        name: 'punctuation.separator.jq'
      }
      {
        match: '\\S+'
        name: 'invalid.illegal.identifier.jq'
      }
    ]
  operator:
    match: '(?x)
      ( \\.\\.?
      | \\?//
      | \\?
      | ==?
      | //=?
      | \\|=?
      | \\+=?
      | -=?
      | \\*=?
      | /=?
      | %=?
      | !=
      | <=?
      | >=?
      )'
    name: 'keyword.operator.jq'
  punctuation:
    patterns: [
      {
        match: '\\(|\\)'
        name: 'punctuation.bracket.round.jq'
      }
      {
        match: '\\[|\\]'
        name: 'punctuation.bracket.square.jq'
      }
      {
        match: ',|;|:'
        name: 'punctuation.separator.jq'
      }
    ]
  self_in_round_brackets:
    patterns: [
      {
        begin: '\\('
        beginCaptures: 0: name: 'punctuation.definition.bracket.round.begin.jq'
        endCaptures:   0: name: 'punctuation.definition.bracket.round.end.jq'
        end: '\\)'
        patterns: [
          {
            include: '$self'
          }
        ]
      }
      {
        include: '$self'
      }
    ]
  string:
    begin: '"'
    end: '"'
    name: 'string.quoted.double.jq'
    patterns: [
      {
        match: '\\\\(["\\\\/bfnrt]|u[0-9a-fA-F]{4})'
        name: 'constant.character.escape.jq'
      }
      {
        include: '#string_interpolation'
      }
      {
        match: '\\\\.'
        name: 'invalid.illegal.unrecognized-string-escape.jq'
      }
    ]
  string_interpolation:
    begin: '\\\\\\('
    beginCaptures: 0: name: 'punctuation.section.embedded.jq.begin.jq'
    endCaptures:   0: name: 'punctuation.section.embedded.jq.end.jq'
    end: '\\)'
    name: 'source.jq.embedded.source'
    patterns: [
      {
        include: '#self_in_round_brackets'
      }
    ]
  variable:
    match: '\\$([a-zA-Z_]\\w*::)*[a-zA-Z_]\\w*'
    name: 'variable.other.jq'
